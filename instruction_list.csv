Instruction list for ForwardCom instruction set. Sort alphabetically. Synchronize with instruction map. Version 1.05,,,,,,,,,,,,
Name,Category,Formats,Template,Source operands,OP1,OP2,IM3 bits used,Operand types general purpose registers,Operand types scalar,Operand types vectors,Immediate operand type,Description
abs,1,0x130,0xB,1,16,0,0,0,0xF00F,0xF00F,0,absolute value of integer and optionally floating point
abs,1,0x180,0xB,1,0,0,0,0x100F,0,0,18,absolute value of integer. use saturation if IM1 = 1
add,1,0x110,0xC,2,2,0,0,0x0008,0,0,3,add 16-bit sign extended constant to register
add,1,0x110,0xC,2,7,0,0,0x0008,0,0,8,shift 16-bit sign extended constant left by 16 and add to register
add,1,0x110,0xC,2,17,0,0,0x0008,0,0,6,sign-extend IM2 to 64 bits and shift left by unsigned constant IM1 and add to register
add,1,0x130,0xC,2,33,0,0,0,0x0200,0x0200,3,broadcast 16-bit constant and add it to 16-bit vector elements
add,1,0x130,0xC,2,40,0,0,0,0x0400,0x0400,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and add to 32-bit vector elements"
add,1,0x130,0xC,2,41,0,0,0,0x0800,0x0800,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and add to 64-bit vector elements"
add,1,0x130,0xC,2,48,0,0,0,0x0400,0x0400,8,"shift 16-bit signed constant left by 16, broadcast and add to 32-bit vector elements"
add,1,0x130,0xC,2,49,0,0,0,0x0800,0x0800,8,"shift 16-bit signed constant left by 16, broadcast and add to 64-bit vector elements"
add,1,0x130,0xC,2,58,0,0,0,0x2000,0x2000,64,"convert half precision floating point constant to single precision, broadcast and add to vector"
add,1,0x130,0xC,2,59,0,0,0,0x4000,0x4000,64,"convert half precision floating point constant to double precision, broadcast and add to vector"
add,2,1,1,2,2,0,0,0x0008,0,0,1,addition
add,2,2,1,2,9,0,0,0x0008,0,0,0,addition
add,2,10,1,2,20,0,0,0,0x0020,0x0020,0,addition
add,2,10,1,2,21,0,0,0,0x0040,0x0040,0,addition
add,3,0xFFFFFFFF,0,2,8,0,0,0x006F,0x906F,0x906F,0,addition
add_add,3,0xFFFFCC0F,0,3,49,0,3,0x0F00,0xFF00,0xFF00,0,"three operand add, optional sign change"
add_c,1,0x120,0xA,2,28,0,0,0,0x1F00,0x1F00,0,"add with carry. data in even vector elements, carry in odd elements"
add_cps,2,11,1,2,28,0,0,0x0008,0x00FF,0x00FF,0,"get size of compressed image for vector register RD and add it to g. p. register RS (r0-r14, r31)"
add_hi,1,0x290,0xA,2,4,0,0,0x0008,0,0,4,shift 32-bit constant left by 32 and add to register
add_jump,4,0x073,0,3,57,0,0,0x906F,0,0,0,"add, jump unconditionally"
add_jump_carry,4,0x2F3,0,3,24,0,0,0x100F,0,0,0,"add unsigned, jump if carry"
add_jump_ncarry,4,0x2F3,0,3,25,0,0,0x100F,0,0,0,"add unsigned, jump if not carry"
add_jump_neg,4,0x2F3,0,3,18,0,0,0xF00F,0,0,0,"add signed, jump if negative"
add_jump_nneg,4,0x2F3,0,3,19,0,0,0xF00F,0,0,0,"add signed, jump if zero or positive"
add_jump_noverfl,4,0x2F3,0,3,23,0,0,0xF00F,0,0,0,"add signed, jump if not overflow"
add_jump_npos,4,0x2F3,0,3,21,0,0,0xF00F,0,0,0,"add signed, jump if zero or negative"
add_jump_nzc,4,0x2F3,0,3,26,0,0,0x100F,0,0,0,"add unsigned, jump if not zero or carry"
add_jump_nzero,4,0x2F3,0,3,16,0,0,0xF00F,0,0,0,"add, jump if not zero"
add_jump_overfl,4,0x2F3,0,3,22,0,0,0xF00F,0,0,0,"add signed, jump if overflow"
add_jump_pos,4,0x2F3,0,3,20,0,0,0xF00F,0,0,0,"add signed, jump if positive"
add_jump_zc,4,0x2F3,0,3,27,0,0,0x100F,0,0,0,"add unsigned, jump if zero or carry"
add_jump_zero,4,0x2F3,0,3,17,0,0,0xF00F,0,0,0,"add, jump if zero"
add_oc,1,0x120,0xA,2,38,0,0,0,0xFF00,0xFF00,0,"add with overflow check. data in even elements, overflow bits in odd elements"
add_ss,1,0x120,0xA,2,30,0,0,0,0x1F00,0x1F00,0,"add integers, signed with saturation"
add_unsigned,1,0x290,0xA,2,2,0,0,0x0008,0,0,20,Add zero-extended 32-bit constant to general purpose register
add_us,1,0x120,0xA,2,31,0,0,0,0x1F00,0x1F00,0,"add integers, unsigned with saturation"
address,1,0x290,0xA,2,32,0,0,0x0008,0,0,4,"add signed constant to pointer register. can be DATAP, IP, SP"
and,1,0x110,0xC,2,18,0,0,0x0008,0,0,6,sign-extend IM2 to 64 bits and shift left by unsigned constant IM1 and do bitwise AND with register
and,1,0x130,0xC,2,34,0,0,0,0x0200,0x0200,3,broadcast 16-bit constant and do a bitwise AND with 16-bit vector elements
and,1,0x130,0xC,2,42,0,0,0,0x0400,0x0400,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and do a bitwise AND with 32-bit vector elements"
and,1,0x130,0xC,2,43,0,0,0,0x0800,0x0800,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and do a bitwise AND with 64-bit vector elements"
and,2,2,1,2,11,0,0,0x0008,0,0,0,bitwise and
and,3,0xFFFFFFFF,0,2,32,0,0,0x006F,0x906F,0x906F,0,bitwise and
and_hi,1,0x290,0xA,2,5,0,0,0x0008,0,0,4,shift 32-bit constant left by 32 and do a bitwise AND with register
and_jump_nzero,4,0x2F3,0,3,44,0,0,0x906F,0,0,0,"bitwise and, jump if not zero"
and_jump_zero,4,0x2F3,0,3,45,0,0,0x906F,0,0,0,"bitwise and, jump if zero"
and_not,3,0xFFFFFFFF,0,2,33,0,0,0x006F,0x906F,0x906F,0,bitwise src1 and not src2
bit_reverse,1,0x130,0xB,1,21,0,0,0,0x1F00,0x1F00,0,reverse the order of bits in each element of vector
bits2bool,1,0x120,0xA,1,14,0,0,0,0x906F,0x906F,0,unpack bits to boolean vector
bitscan_f,1,0x100,0xA,1,1,0,0,0x1F00,0,0,0,bit scan forward. Find index to lowest set bit 
bitscan_f,1,0x130,0xB,1,9,0,0,0,0x100F,0x1F00,0,bit scan forward. find index to lowest set bit
bitscan_r,1,0x100,0xA,1,2,0,0,0x1F00,0,0,0,bit scan reverse. Find index to highest set bit 
bitscan_r,1,0x130,0xB,1,10,0,0,0,0x100F,0x1F00,0,bit scan reverse. find index to highest set bit
bool_reduce,1,0x120,0xA,1,16,0,0,0,0x906F,0x906F,0,AND/OR combination of all elements in boolean vector
bool2bits,1,0x120,0xA,1,15,0,0,0,0x906F,0x906F,0,pack boolean vector into bits
broadcast,1,0x120,0xA,1,13,0,0,0,0x00FF,0x00FF,0,broadcast first element of source vector into all elements of destination vector
broadcast,1,0x130,0xB,1,18,0,0,0,0x906F,0x906F,2,broadcast constant to vector
broadcast,1,0x250,0xA,1,6,0,0,0,0x906F,0x906F,4,broadcast constant to make vector of identical elements
byte_reverse,1,0x130,0xB,1,20,0,0,0,0x100F,0x100F,0,reverse the order of bytes in each element of vector
call,4,0x001,0xA,2,61,0,0,0x0008,0,0,0,"call to address in table with base and index, relative to arbitrary reference point"
call,4,0x002,0xC,1,61,0,0,0x0008,0,0,0,call to address in register
call,4,0x008,0xD,1,8,0,0,0x0008,0,0,0,direct call to relative address
call,4,0x011,0xB,1,59,0,0,0x0008,0,0,0,call to address in memory operand with base and offset
call,4,0x044,0xC,1,59,0,0,0x0008,0,0,0,direct call to relative address
call,4,0x400,0xC,1,59,0,0,0x0800,0,0,0,direct call to absolute address
clear,2,8,1,0,16,0,0,0,0x0008,0x0008,0,clear vector register
clear_bit,3,0x03FCFD7FF,0,2,42,0,0,0x006F,0x906F,0x906F,0,clear single bit
clear_bits_x,1,0x130,0xB,2,3,0,0,0,0x100F,0x100F,18,clear all bits except one
cmp_swap,1,0x270,0xA,2,54,0,0,0,0xFF00,0xFF00,0,atomic compare and exchange
compare,3,0xFFFFFFFF,0,2,7,0,0,0x006F,0x906F,0x906F,0,"compare two operands, return condition code"
compare_jump_absabove,4,0x031,0,3,40,0,0,0x8060,0,0,0,"compare float absolute values, jump if above"
compare_jump_absaboveeq,4,0x031,0,3,39,0,0,0x8060,0,0,0,"compare float absolute values, jump if above or equal"
compare_jump_absbelow,4,0x031,0,3,38,0,0,0x8060,0,0,0,"compare float absolute values, jump if below"
compare_jump_absbeloweq,4,0x031,0,3,41,0,0,0x8060,0,0,0,"compare float absolute values, jump if below or equal"
compare_jump_eq,4,0x2F3,0,3,33,0,0,0x906F,0,0,0,"compare, jump if not equal"
compare_jump_infnan,4,0x031,0,3,26,0,0,0x8060,0,0,0,jump if either operand is infinite or nan
compare_jump_neq,4,0x2F3,0,3,32,0,0,0x906F,0,0,0,"compare, jump if equal"
compare_jump_ninfnan,4,0x031,0,3,27,0,0,0x8060,0,0,0,jump if no operand is infinite or nan
compare_jump_ordered,4,0x031,0,3,25,0,0,0x8060,0,0,0,jump if no operand is nan
compare_jump_sabove,4,0x2F3,0,3,36,0,0,0x906F,0,0,0,"compare signed, jump if above"
compare_jump_saboveeq,4,0x2F3,0,3,35,0,0,0x906F,0,0,0,"compare signed, jump if above or equal"
compare_jump_sbelow,4,0x2F3,0,3,34,0,0,0x906F,0,0,0,"compare signed, jump if below"
compare_jump_sbeloweq,4,0x2F3,0,3,37,0,0,0x906F,0,0,0,"compare signed, jump if below or equal"
compare_jump_uabove,4,0x2F3,0,3,40,0,0,0x100F,0,0,0,"compare unsigned, jump if above"
compare_jump_uaboveeq,4,0x2F3,0,3,39,0,0,0x100F,0,0,0,"compare unsigned, jump if above or equal"
compare_jump_ubelow,4,0x2F3,0,3,38,0,0,0x100F,0,0,0,"compare unsigned, jump if below"
compare_jump_ubeloweq,4,0x2F3,0,3,41,0,0,0x100F,0,0,0,"compare unsigned, jump if below or equal"
compare_jump_unordered,4,0x031,0,3,24,0,0,0x8060,0,0,0,jump if either operand is nan
compare_trap_uabove,4,0x080,0xC,2,63,0,0,0x0008,0,0,20,conditional trap if unsigned above
compress,1,0x120,0xA,1,4,0,0,0,0,0xB04E,0,compress vector of specified length to half the length and half the element size
compress_sparse,1,0x120,0xA,1,9,0,0,0,0,0xFF00,0,compress sparse vector elements indicated by mask bits into contiguous vector
compress_ss,1,0x120,0xA,1,5,0,0,0,0,0xFE00,0,"compress integer vector of specified length to half the length and half the element size, signed with saturation"
compress_store,1,0x270,0xA,1,52,0,0,0,0xFE00,0xFE00,0,compress vector to half element size and store to memory vector of half length
compress_us,1,0x120,0xA,1,6,0,0,0,0,0xFE00,0,"compress integer vector of specified length to half the length and half the element size, unsigned with saturation"
concatenate,1,0x246,0xE,2,0,1,0,0,0x906F,0x906F,0,concatenate two vector of same lengths
div,1,0x110,0xC,2,6,0,0,0x0008,0,0,3,divide register with 16-bit sign extended constant
div,3,0xFFFFFFFF,0,2,17,0,0,0x006F,0x906F,0xFF00,0,division
div_ex_s,1,0x120,0xA,2,24,0,0,0,0x1906,0x1F00,0,divide double-size signed integers with single-size integers. save quotient and remainder
div_ex_u,1,0x120,0xA,2,25,0,0,0,0x1906,0x1F00,0,divide double-size unsigned integers with single-size integers. save quotient and remainder
div_oc,1,0x120,0xA,2,42,0,0,0,0xFF00,0xFF00,0,"divide with overflow check. data in even elements, overflow bits in odd elements"
expand,1,0x120,0xA,1,7,0,0,0,0,0xB04E,0,expand vector to double length and element size. the length and element size after expansion is specified
expand_sparse,1,0x120,0xA,1,10,0,0,0,0,0xFF00,0,expand contiguous vector into sparse vector with positions indicated by mask bits
expand_us,1,0x120,0xA,1,8,0,0,0,0,0x100E,0,expand integer vector to double length and element size. the length and element size after expansion is specified
extract,1,0x120,0xA,2,11,0,0,0,0x00FF,0x00FF,0,extract one element from vector into scalar
extract_bit,3,0x03FCFD7FF,0,2,40,0,0,0x006F,0x906F,0x906F,0,extract single bit
extract_store,1,0x270,0xA,2,51,0,0,0,0xFF00,0xFF00,0,extract one element from vector and store to memory
fence,1,0x270,0xB,1,49,0,0,0,0xFF00,0xFF00,0,memory fence. type indicated by IM1 bits
filler,4,0x002,0xC,0,63,0,0,0x0008,0,0,19,filler indicating unused code (0x6FFFFFFF)
float2int,1,0x130,0xB,1,12,0,0,0,0x8060,0x8060,0,convert floating point to integer
fp_category,1,0x130,0xB,2,19,0,0,0,0x8060,0x8060,18,check if floating point number belongs to a specified set of categories
get_len,1,0x120,0xA,1,1,0,0,0,0x906F,0x906F,0,get length of vector as number of bytes
get_num,1,0x120,0xA,1,3,0,0,0,0x906F,0x906F,0,get length of vector as number of elements
gp2vec,1,0x130,0xB,1,0,0,0,0x006F,0x006F,0,0,copy value from general purpose register to vector register
input,1,0x120,0xA,2,48,0,0,0,0x100F,0x100F,0,"read from input port. RD = vector register, RT = port address, RS = vector length (privileged instruction)."
insert,1,0x120,0xA,2,12,0,0,0,0x00FF,0x00FF,0,insert one element into vector. other elements are unchanged
insert_bit,1,0x130,0xB,3,23,0,0,0,0x906F,0x906F,18,replace bit at position n
insert_hi,1,0x250,0xA,2,1,0,0,0,0x906F,0x906F,4,"make vector of two elements. first element comes from source, second element is constant"
insert_hi,1,0x290,0xA,2,1,0,0,0x0008,0,0,4,insert 32-bit constant into high part of general purpose register. low part is unchanged
int2float,1,0x130,0xB,1,13,0,0,0,0x100C,0x100C,0,convert integer to floating point
interleave,1,0x246,0xE,3,2,1,0,0,0,0xFF00,0,interleave elements from two vectors
jump,4,0x001,0xA,2,60,0,0,0x0008,0,0,0,"jump to address in table with base and index, relative to arbitrary reference point"
jump,4,0x002,0xC,1,60,0,0,0x0008,0,0,0,jump to address in register
jump,4,0x008,0xD,1,0,0,0,0x0008,0,0,0,direct jump to relative address
jump,4,0x011,0xB,1,58,0,0,0x0008,0,0,0,jump to address in memory operand with base and offset
jump,4,0x044,0xC,1,58,0,0,0x0008,0,0,0,direct jump to relative address
jump,4,0x400,0xC,1,58,0,0,0x0800,0,0,0,direct jump to absolute address
load_hi,1,0x250,0xA,1,0,0,0,0,0x906F,0x906F,4,"make vector of two elements. first element is zero, second element is constant"
load_hi,1,0x290,0xA,1,0,0,0,0x0008,0,0,4,load 32-bit constant into high part of general purpose register. low part is zero
make_mask,1,0x250,0xA,1,2,0,0,0,0x906F,0x906F,20,make boolean vector from 32 constant bits
make_sequence,1,0x130,0xB,2,4,0,0,0,0xF00F,0xF00F,2,Make a vector with RS sequential numbers. First value is IM1.
mask_length,1,0x130,0xB,3,5,0,0,0,0x100F,0x100F,18,Make mask with true in the first RS elements
max,3,0xFFFFFFFF,0,2,21,0,0,0x006F,0x906F,0x906F,0,maximum of signed numbers
max_abs,3,0xFFFFFFFF,0,2,23,0,0,0x0030,0x8030,0x8030,0,maximum of absolute values of floating point numbers
max_u,3,0xFFFFFFFF,0,2,23,0,0,0x000F,0x100F,0x100F,0,maximum of unsigned integers
min,3,0xFFFFFFFF,0,2,20,0,0,0x000F,0x100F,0x100F,0,minimum of unsigned integers
min_abs,3,0xFFFFFFFF,0,2,22,0,0,0x0030,0x8030,0x8030,0,minimum of absolute values of floating point numbers
min_u,3,0xFFFFFFFF,0,2,22,0,0,0x000F,0x100F,0x100F,0,minimum of unsigned integers
mov,1,0x130,0xC,1,56,0,0,0,0x2000,0x2000,64,convert half precision floating point constant to single precision scalar
mov,1,0x130,0xC,1,57,0,0,0,0x4000,0x4000,64,convert half precision floating point constant to double precision scalar
move,1,0x110,0xC,1,0,0,0,0x0008,0,0,3,copy 16-bit sign extended constant to register
move,1,0x110,0xC,1,16,0,0,0x0008,0,0,6,sign-extend IM2 to 64 bits and shift left by unsigned constant IM1
move,1,0x130,0xC,1,32,0,0,0,0x0200,0,3,copy 16-bit constant to 16-bit scalar
move,1,0x130,0xC,1,38,0,0,0,0x0400,0,6,shift 8-bit signed constant left by another 8-bit constant and store it in 32-bit scalar
move,1,0x130,0xC,1,39,0,0,0,0x0800,0,6,shift 8-bit signed constant left by another 8-bit constant and store it in 64-bit scalar
move,2,1,1,1,1,0,0,0x0008,0,0,1,copy signed immediate to register
move,2,2,1,1,8,0,0,0x0008,0,0,0,copy register to register
move,2,4,1,1,14,0,0,0x0008,0,0,0,"read from memory. pointer RS = r0-r14, r31"
move,2,9,1,1,17,0,0,0,0x0020,0,33,convert signed immediate to float
move,2,9,1,1,18,0,0,0,0x0040,0,33,convert signed immediate to double
move,2,10,1,1,19,0,0,0,0x0008,0x0008,0,copy vector register
move,3,0xFFFFFFFF,0,1,2,0,0,0x006F,0x906F,0x906F,,copy value to register
move_u,1,0x110,0xC,1,1,0,0,0x0008,0,0,19,copy 16-bit zero extended constant to register
mul,1,0x110,0xC,2,5,0,0,0x0008,0,0,3,multiply 16-bit sign extended constant with register
mul,1,0x130,0xC,2,60,0,0,0,0x2000,0x2000,64,"convert half precision floating point constant to single precision, broadcast and multiply with vector"
mul,1,0x130,0xC,2,61,0,0,0,0x4000,0x4000,64,"convert half precision floating point constant to double precision, broadcast and multiply with vector"
mul,2,10,1,2,24,0,0,0,0x0020,0x0020,0,multiplication
mul,2,10,1,2,25,0,0,0,0x0040,0x0040,0,multiplication
mul,3,0xFFFFFFFF,0,2,12,0,0,0x006F,0x906F,0x9867,0,multiply (low part of result for integer operands)
mul_add,3,0xFFFFCC0F,0,3,48,0,4,0x0F00,0xFF00,0xFF00,0,"fused multiply and add, optional sign change"
mul_ex_s,3,0x8033F0FC,0,2,15,0,0,0x0B04,0x1B04,0x1F00,0,"multiply signed integers in even vector elements, double size result"
mul_ex_u,3,0x8033F0FC,0,2,16,0,0,0x0B04,0x1B04,0x1F00,0,"multiply unsigned integers in even vector elements, double size result"
mul_hi_s,3,0xFFFFFFFF,0,2,13,0,0,0x0B04,0x1B04,0x1F00,0,"multiply signed integers, high part of result"
mul_hi_u,3,0xFFFFFFFF,0,2,14,0,0,0x0B04,0x1B04,0x1F00,0,"multiply unsigned integers, high part of result"
mul_oc,1,0x120,0xA,2,41,0,0,0,0xFF00,0xFF00,0,"multiply with overflow check. data in even elements, overflow bits in odd elements"
mul_ss,1,0x120,0xA,2,34,0,0,0,0x1F00,0x1F00,0,"multiply integers, signed with saturation"
mul_us,1,0x120,0xA,2,35,0,0,0,0x1F00,0x1F00,0,"multiply integers, unsigned with saturation"
nop,1,0x300,0xC,0,0,0,0,0x09,0,0,0,no operation
nop,2,0x0,0x1,0,0,0,0,0x09,0,0,0,no operation
nop,3,0x403,0,0,0,0,0,0x09,0,0,0,no operation
or,1,0x110,0xC,2,19,0,0,0x0008,0,0,6,sign-extend IM2 to 64 bits and shift left by unsigned constant IM1 and do bitwise OR with register
or,1,0x130,0xC,2,35,0,0,0,0x0200,0x0200,3,broadcast 16-bit constant and do a bitwise OR with 16-bit vector elements
or,1,0x130,0xC,2,44,0,0,0,0x0400,0x0400,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and do a bitwise OR with 32-bit vector elements"
or,1,0x130,0xC,2,45,0,0,0,0x0800,0x0800,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and do a bitwise OR with 64-bit vector elements"
or,2,2,1,2,12,0,0,0x0008,0,0,0,bitwise or
or,3,0xFFFFFFFF,0,2,34,0,0,0x006F,0x906F,0x906F,0,bitwise and
or_hi,1,0x290,0xA,2,6,0,0,0x0008,0,0,4,shift 32-bit constant left by 32 and do a bitwise OR with register
or_jump_nzero,4,0x2F3,0,3,46,0,0,0x906F,0,0,0,"bitwise or, jump if not zero"
or_jump_zero,4,0x2F3,0,3,47,0,0,0x906F,0,0,0,"bitwise or, jump if zero"
output,1,0x120,0xA,2,49,0,0,0,0x100F,0x100F,0,"write to output port. RD = vector register source operand, RT = port address, RS = vector length (privileged instruction)."
permute,1,0x246,0xE,3,1,1,0,0,0x906F,0x906F,0,"permute vector elements within blocks, using index vector"
permute,1,0x250,0xA,3,8,0,0,0,0x906F,0x906F,20,"permute vector elements within blocks, using constant indices"
popcount,1,0x130,0xB,1,17,0,0,0,0x100F,0x1F00,0,population count. number of bits that are 1
prefetch,3,0x7BD7F0,0,1,3,0,4,0x006F,0x906F,0x906F,0,prefetch to cache
read_cpb,1,0x180,0xB,1,34,0,0,0x1708,0,0,0,read capabilities register into general purpose register
read_insert,1,0x270,0xA,2,50,0,0,0,0xFF00,0xFF00,0,replace one element in vector with scalar memory operand
read_memory_map,1,0x270,0xA,2,62,0,0,0,0x100F,0x100F,0,"Read memory map. RD = map entry, RT = memory pointer, RS = vector length and negative index to both source and destination (privileged)."
read_perf,1,0x180,0xB,1,36,0,0,0x1708,0,0,0,read performance counter into general purpose register
read_perfs,1,0x180,0xB,1,37,0,0,0x1708,0,0,0,"read performance counter into general purpose register, serializing"
read_spe,1,0x180,0xB,1,32,0,0,0x1708,0,0,0,read special register into general purpose register
read_spev,1,0x130,0xB,1,30,0,0,0,0x100F,0x100F,0,read and broadcast special register into vector register
read_sys,1,0x180,0xB,1,38,0,0,0x1708,0,0,0,read system register into general purpose register
rem,3,0xFFFFFFFF,0,2,18,0,0,0x006F,0x906F,0xFF00,0,remainder or modulo
repeat_block,1,0x246,0xE,3,8,1,0,0,0,0xFC00,0,repeat a block of data to make a longer vector
repeat_within_blocks,1,0x246,0xE,3,9,1,0,0,0,0xFC00,0,broadcast the first element of each block of data in a vector to the entire block
replace,1,0x250,0xA,2,3,0,0,0,0x906F,0x906F,4,replace all or selected elements in vector by constant
replace_even,1,0x250,0xA,2,4,0,0,0,0x906F,0x906F,4,replace even-numbered elements in vector by constant
replace_odd,1,0x250,0xA,2,5,0,0,0,0x906F,0x906F,4,replace odd-numbered elements in vector by constant
restore_cp,2,12,1,1,30,0,0,0,0x00FF,0x00FF,0,"restore vector register from compressed image pointed to by RS (r0-r14, r31)"
return,4,0x001,0xB,0,62,0,0,0x0008,0,0,0,return from function
rotate,3,0x03FCFD7FF,0,2,39,0,0,0x006F,0x906F,0x906F,0,"rotate bits left if src2 positive, right if negative"
round,1,0x130,0xB,1,14,0,0,0,0x8060,0x8060,0,round floating point to integer in floating point representation
round_d2,1,0x100,0xA,1,3,0,0,0x100F,0,0,0,round down to nearest power of 2
round_u2,1,0x100,0xA,1,4,0,0,0x100F,0,0,0,round up to nearest power of 2
round2n,1,0x130,0xB,2,15,0,0,0,0xE000,0xE000,0,round floating point to nearest multiple of 2^n
save_cp,2,13,1,1,31,0,0,0,0x00FF,0x00FF,0,"save vector register to compressed image pointed to by RS (r0-r14, r31)"
set_bit,3,0x03FCFD7FF,0,2,41,0,0,0x006F,0x906F,0x906F,0,set single bit
set_bits_x,1,0x130,0xB,2,2,0,0,0,0x100F,0x100F,18,set all bits except one
set_len,1,0x120,0xA,2,0,0,0,0,0x906F,0x906F,0,change length of vector to specified number of bytes
set_num,1,0x120,0xA,2,2,0,0,0,0x906F,0x906F,0,change length of vector to specified number of elements
shift,3,0x03FCFD7FF,0,2,36,0,0,0x006F,0x906F,0x906F,0,shift bits left or right. Multiply float by power of 2
shift_add,1,0x180,0xB,2,1,0,0,0x100F,0,0,2,"shift integer left/right unsigned by constant, then add to integer"
shift_down,1,0x120,0xA,2,21,0,0,0,0x906F,0x906F,0,shift vector elements down. lower elements are lost
shift_expand,1,0x120,0xA,2,18,0,0,0,0x00FF,0x00FF,0,shift vector bytes up. destination vector will be longer with lower half zero
shift_jump_carry,4,0x073,0,3,30,0,0,0x906F,0,0,0,"shift left, jump if carry"
shift_jump_ncarry,4,0x073,0,3,31,0,0,0x906F,0,0,0,"shift left, jump if not carry"
shift_jump_nzero,4,0x073,0,3,28,0,0,0x906F,0,0,0,"shift left, jump if not zero"
shift_jump_zero,4,0x073,0,3,29,0,0,0x906F,0,0,0,"shift left, jump if zero"
shift_left,2,1,1,2,4,0,0,0x0008,0,0,17,shift bits left
shift_reduce,1,0x120,0xA,2,19,0,0,0,0x00FF,0x00FF,0,shift vector bytes down. destination vector will be shorter with lower part lost
shift_rev,3,0x03FCFD7FF,0,2,37,0,0,0x006F,0x906F,0x906F,0,shift bits left or right. Multiply float by power of 2. Operands swapped
shift_rightu,2,1,1,2,5,0,0,0x0008,0,0,17,shift bits right unsigned
shift_rightu,3,0x03FCFD7FF,0,2,38,0,0,0x006F,0x906F,0x906F,0,shift bits right or left with zero extension
shift_up,1,0x120,0xA,2,20,0,0,0,0x906F,0x906F,0,shift vector elements up. upper elements are lost
shl_ss,1,0x120,0xA,2,36,0,0,0,0x1F00,0x1F00,0,"shift left integers, signed with saturation"
shl_us,1,0x120,0xA,2,37,0,0,0,0x1F00,0x1F00,0,"shift left integers, unsigned with saturation"
sign_extend,3,0xFFFFFFFF,0,1,4,0,0,0x0007,0x0007,0x0007,0,sign extend to 64 bits
sqrt,1,0x120,0xA,1,26,0,0,0,0xE000,0xE000,0,square root
store,1,0x270,0xB,1,48,0,0,0x006F,0x906F,0,4,store constant to memory
store,1,0x270,0xB,1,48,0,0,0,0xFF00,0,4,store constant to memory operand with base and 8-bit offset
store,2,5,1,1,15,0,0,0x0008,0,0,0,"write to memory. pointer RS = r0-r14, r31"
store,3,0x7BD7F0,0,1,1,0,0,0x006F,0x906F,0x906F,,store value of register to memory
sub,1,0x110,0xC,2,3,0,0,0x0008,0,0,3,subtract 16-bit sign extended constant from register
sub,2,1,1,2,3,0,0,0x0008,0,0,1,subtraction
sub,2,2,1,2,10,0,0,0x0008,0,0,0,subtraction
sub,2,10,1,2,22,0,0,0,0x0020,0x0020,0,subtraction
sub,2,10,1,2,23,0,0,0,0x0040,0x0040,0,subtraction
sub,3,0xFFFFFFFF,0,2,9,0,0,0x006F,0x906F,0x906F,0,subtraction
sub_b,1,0x120,0xA,2,29,0,0,0,0x1F00,0x1F00,0,"subtract with borrow. data in even vector elements, borrow bit in odd elements"
sub_cps,2,11,1,2,29,0,0,0x0008,0x00FF,0x00FF,0,"get size of compressed image for vector register RD and subtract it from g. p. register RS (r0-r14, r31)"
sub_jum_nneg,4,0x011,0xB,3,3,0,0,0x100F,0,0,0,"subtract signed, jump if zero or positive"
sub_jump,4,0x073,0,3,56,0,0,0x906F,0,0,0,"subtract, jump unconditionally"
sub_jump_borrow,4,0x011,0xB,3,8,0,0,0x100F,0,0,0,"subtract unsigned , jump if borrow"
sub_jump_nborrow,4,0x011,0xB,3,9,0,0,0x100F,0,0,0,"subtract unsigned , jump if not borrow"
sub_jump_neg,4,0x011,0xB,3,2,0,0,0x100F,0,0,0,"subtract signed, jump if negative"
sub_jump_noverfl,4,0x011,0xB,3,7,0,0,0x100F,0,0,0,"subtract signed, jump if not overflow"
sub_jump_npos,4,0x011,0xB,3,5,0,0,0x100F,0,0,0,"subtract signed, jump if zero or negative"
sub_jump_nzb,4,0x011,0xB,3,10,0,0,0x100F,0,0,0,"subtract unsigned, jump if not zero or borrow"
sub_jump_nzero,4,0x011,0xB,3,0,0,0,0x100F,0,0,0,"subtract, jump if not zero"
sub_jump_overfl,4,0x011,0xB,3,6,0,0,0x100F,0,0,0,"subtract signed, jump if overflow"
sub_jump_pos,4,0x011,0xB,3,4,0,0,0x100F,0,0,0,"subtract signed, jump if positive"
sub_jump_zb,4,0x011,0xB,3,11,0,0,0x100F,0,0,0,"subtract unsigned, jump if zero or borrow"
sub_jump_zero,4,0x011,0xB,3,1,0,0,0x100F,0,0,0,"subtract, jump if zero"
sub_oc,1,0x120,0xA,2,39,0,0,0,0xFF00,0xFF00,0,"subtract with overflow check. data in even elements, overflow bits in odd elements"
sub_r,1,0x110,0xC,2,4,0,0,0x0008,0,0,3,subtract reverse 16-bit sign extended constant from register
sub_rev,3,0xFFFFFFFF,0,2,10,0,0,0x006F,0x906F,0x906F,0,reverse subtraction
sub_ss,1,0x120,0xA,2,32,0,0,0,0x1F00,0x1F00,0,"subtract integers, signed with saturation"
sub_unsigned,1,0x290,0xA,2,3,0,0,0x0008,0,0,20,Subtract zero-extended 32-bit constant from general purpose register
sub_us,1,0x120,0xA,2,33,0,0,0,0x1F00,0x1F00,0,"subtract integers, unsigned with saturation"
subr_oc,1,0x120,0xA,2,40,0,0,0,0xFF00,0xFF00,0,"subtract reverse with overflow check. data in even elements, overflow bits in odd elements"
sys_call,4,0x001,0xA,1,63,0,0,0x000C,0,0,0,system call to ID in register
sys_call,4,0x220,0xB,2,63,0,0,0x0804,0,0,0,system call to ID in constant fields
sys_return,4,0x002,0xC,0,62,0,0,0x0008,0,0,0,return from system function or interrupt
test_bits_and,1,0x247,0xE,3,1,1,6,0,0x906F,0x906F,7,bool vector is true if all of the indicated bits are 1
test_bits_or,1,0x247,0xE,3,0,1,6,0,0x906F,0x906F,7,bool vector is true if at least one of the indicated bits is 1
test_jump_nzero,4,0x2F3,0,3,42,0,0,0x906F,0,0,0,"bitwise and, destination register unchanged, jump if not zero"
test_jump_zero,4,0x2F3,0,3,43,0,0,0x906F,0,0,0,"bitwise and, destination register unchanged, jump if zero"
testbit_jump_nzero,4,0x073,0,3,50,0,0,0x906F,0,0,0,"test single bit in source1 indexed by source2, jump if not zero"
testbit_jump_nzero,4,0x073,0,3,52,0,0,0x906F,0,0,0,"test single bit in source1 indexed by source2, jump if not zero, use vector registers"
testbit_jump_zero,4,0x073,0,3,51,0,0,0x906F,0,0,0,"test single bit in source1 indexed by source2, jump if zero"
testbit_jump_zero,4,0x073,0,3,53,0,0,0x906F,0,0,0,"test single bit in source1 indexed by source2, jump if zero, use vector registers"
toggle_bit,3,0x03FCFD7FF,0,2,43,0,0,0x006F,0x906F,0x906F,0,toggle single bit
trap,4,0x002,0xC,0,63,0,0,0x0008,0,0,0,unconditional trap (interrupt)
truth_tab2,1,0x130,0xB,3,24,0,0,0,0x100F,0x100F,18,"boolean function of two inputs, given by truth table"
truth_tab3,1,0x246,0xE,4,3,1,0,0,0x1F00,0x1F00,19,"boolean function of three inputs, given by truth table"
undef,3,0xFFFFFFFF,0,2,63,0,0,0,0,0,0,undefined instruction. will never be defined
userdef55,3,0xFFFFFFFF,0,2,55,0,0,0x906F,0x906F,0x906F,0,user defined instruction
userdef56,3,0xFFFFFFFF,0,2,56,0,0,0x906F,0x906F,0x906F,0,user defined instruction
userdef57,3,0xFFFFFFFF,0,2,57,0,0,0x906F,0x906F,0x906F,0,user defined instruction
userdef58,3,0xFFFFFFFF,0,2,58,0,0,0x906F,0x906F,0x906F,0,user defined instruction
userdef59,3,0xFFFFFFFF,0,2,59,0,0,0x906F,0x906F,0x906F,0,user defined instruction
userdef60,3,0xFFFFFFFF,0,2,60,0,0,0x906F,0x906F,0x906F,0,user defined instruction
userdef61,3,0xFFFFFFFF,0,2,61,0,0,0x906F,0x906F,0x906F,0,user defined instruction
userdef62,3,0xFFFFFFFF,0,2,62,0,0,0x906F,0x906F,0x906F,0,user defined instruction
vec2gp,1,0x130,0xB,1,1,0,0,0x006F,0x006F,0x006F,0,copy value from first element of vector register to general purpose register
write_cpb,1,0x180,0xB,1,35,0,0,0x1708,0,0,0,write general purpose register to capabilities register
write_memory_map,1,0x270,0xA,2,63,0,0,0,0x100F,0x100F,0,"Write memory map. RD = map entry, RT = memory pointer, RS = vector length and negative index to both source and destination (privileged)."
write_spe,1,0x180,0xB,1,33,0,0,0x1708,0,0,0,write general purpose register to special register
write_sys,1,0x180,0xB,1,39,0,0,0x1708,0,0,0,write general purpose register to system register
xor,1,0x110,0xC,2,20,0,0,0x0008,0,0,6,sign-extend IM2 to 64 bits and shift left by unsigned constant IM1 and do bitwise exclusive OR with register
xor,1,0x130,0xC,2,36,0,0,0,0x0200,0x0200,3,broadcast 16-bit constant and do a bitwise exclusive OR with 16-bit vector elements
xor,1,0x130,0xC,2,46,0,0,0,0x0400,0x0400,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and do a bitwise exclusive OR with 32-bit vector elements"
xor,1,0x130,0xC,2,47,0,0,0,0x0800,0x0800,6,"shift 8-bit signed constant left by another 8-bit constant, broadcast and do a bitwise exclusive OR with 64-bit vector elements"
xor,2,2,1,2,13,0,0,0x0008,0,0,0,bitwise exclusive or
xor,3,0xFFFFFFFF,0,2,35,0,0,0x006F,0x906F,0x906F,0,bitwise exclusive or
xor_hi,1,0x290,0xA,2,7,0,0,0x0008,0,0,4,shift 32-bit constant left by 32 and do a bitwise exclusive OR with register
xor_jump_nzero,4,0x2F3,0,3,48,0,0,0x906F,0,0,0,"bitwise exclusive or, jump if not zero"
xor_jump_zero,4,0x2F3,0,3,49,0,0,0x906F,0,0,0,"bitwise exclusive or, jump if zero"
